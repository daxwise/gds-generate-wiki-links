name: "Generate Wiki Links"
description: "Generates a directory of services in the cluster in the repo's wiki"
inputs:
  gds_repo:
    description: "The Central GDS Cluster Directory repo, in org/repo format. e.g. glg/gds"
    required: true
  cluster_name:
    description: "The name of the cluster. e.g. i99"
    required: true
  cluster_version:
    description: "The version of the cluster. e.g. v1"
    required: true
  git_username:
    description: "git username to identify commits"
    required: true
  git_email:
    description: "email address for the git user to make commits with"
    required: true
runs:
  using: "composite"
  steps:
  - name: Generate Wiki Links
    shell: bash
    run: |
      set -e
      pushd ./code > /dev/null
      GITHUB_REMOTE="${{github.event.repository.ssh_url}}"
      GITHUB_WIKI_REMOTE=$(echo "${GITHUB_REMOTE}" | perl -pe 's|\.git$|\.wiki\.git|')
      WIKI_DIR="../wiki"
      WIKI_HOME_PAGE="$WIKI_DIR/Home.md"
      GITHUB_GDS_REMOTE="git@github.com:${{inputs.gds_repo}}.git"
      GDS_DIR="../gds"
      [ ! -d "${WIKI_DIR}" ] && git clone "${GITHUB_WIKI_REMOTE}" "${WIKI_DIR}"
      [ ! -d "${GDS_DIR}" ] && git clone "${GITHUB_GDS_REMOTE}" "${GDS_DIR}"
      # Generate Links to Sumo Dashboard per service
      # Generate Links to Sumo Dashboard per cluster
      
      ECS_CLUSTER_CONSOLE_URL="https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/${{inputs.cluster_version}}-${{inputs.cluster_name}}/services"
      CLUSTER_SUMO_DASHBOARD_URL="https://service.us2.sumologic.com/ui/dashboard.html?k=lQbhHeuGZGWZWWGieu9m62KoH2g1NCrIXOckKoK7boUACqcaEQ5tkUxQ2DzT&f=&t=r&filters=Cluster*eq*${{inputs.cluster_name}}**Service*eq*%5C***TaskDefVersion*eq*%5C*"
      CLUSTER_CONFIG_CODEPIPELINE_URL="https://console.aws.amazon.com/codesuite/codepipeline/pipelines/${{inputs.cluster_version}}-${{inputs.cluster_name}}-ccwatcher/view?region=us-east-1"
      tee "$WIKI_HOME_PAGE" <<EOF
      ### Cluster Links
      Dashboard | Description
      -- | --
      [Cluster Config Watcher](${CLUSTER_CONFIG_CODEPIPELINE_URL}) | This will take you to the AWS Codepipeline responsible for processing this Cluster Config. If changes to the environment do not seem to go out we might start looking here.
      [ECS Cluster](${ECS_CLUSTER_CONSOLE_URL}) | This takes you directly to the AWS ECS Cluster Dashboard
      [Sumo Cluster Dashboard](${CLUSTER_SUMO_DASHBOARD_URL}) | This a Sumo Logic log dashboard where you can view lots of information about this cluster. You can drill into each service using filters.
      EOF
      tee -a "$WIKI_HOME_PAGE" <<EOF
      ### Service Links
      Service | App HC | Deploy Logs | SumoLogic | ECS
      -- | -- | -- | -- | --
      EOF
      # Generate the links and table row for each service
      for orders_file in $(find . -maxdepth 2 -type f -name "orders"); do
        unset SERVICE
        unset SERVICE_DIR_URL
        unset SERVICE_SUMO_DASHBOARD_URL
        unset SERVICE_BUILD_LOGS_URL
        unset SERVICE_ECS_CONSOLE_URL
        unset GITHUB_REPOSITORY_OWNER
        unset GITHUB_REPOSITORY_NAME
        unset deploy_type
        SERVICE=$(basename $(dirname "${orders_file}"))
        unset GITHUB_URL
        unset GITHUB_REPOSITORY_OWNER
        unset GITHUB_REPOSITORY_NAME
        GITHUB_URL=$(cat "${orders_file}" | egrep '^autodeploy ' | awk -F'#' '{print $1;}')
        GITHUB_BRANCH=$(cat "${orders_file}" | egrep '^autodeploy ' | awk -F'#' '{print $2;}')
        eval $(bash -c "cat \"${orders_file}\" | grep HEALTHCHECK")
        GITHUB_REPOSITORY_OWNER=$(echo "${GITHUB_URL}" | perl -pe 's|.*github\.com[:/](.*?)/.*|$1|')
        GITHUB_REPOSITORY_NAME=$(echo "${GITHUB_URL}" | perl -pe 's|.*github\.com[:/].*?/(.*)\.git|$1|')
        if [ -n "${GITHUB_REPOSITORY_OWNER}" ] \
        && [ -n "${GITHUB_REPOSITORY_NAME}" ]; then
          deploy_type="autodeploy"
          SERVICE_DIR_URL="https://github.com/${GITHUB_REPOSITORY_OWNER}/${GITHUB_REPOSITORY_NAME}/tree/${GITHUB_BRANCH}"
          SERVICE_BUILD_LOGS_URL="https://console.aws.amazon.com/codesuite/codepipeline/pipelines/${{inputs.cluster_version}}-${{inputs.cluster_name}}-${SERVICE}--${GITHUB_BRANCH}/view?region=us-east-1"
        fi
        unset ECR_TAG
        unset ECR_REPO
        unset GITHUB_REPOSITORY_OWNER
        unset GITHUB_REPOSITORY_NAME
        ECR_TAG=$(cat "${orders_file}" | egrep '^dockerdeploy ' | awk -F':' '{print $2;}')
        ECR_TAG=${ECR_TAG:-latest}
        ECR_REPO=$(cat "${orders_file}" | egrep '^dockerdeploy ' | awk '{print $2;}' | awk -F':' '{print $1;}')
        GITHUB_REPOSITORY_OWNER=$(echo "${ECR_REPO}" | perl -pe 's|github/(.*?)/.*?/.*|$1|')
        GITHUB_REPOSITORY_NAME=$(echo "${ECR_REPO}" | perl -pe 's|github/.*?/(.*?)/.*|$1|')
        if [ -n "${ECR_REPO}" ]; then
          deploy_type="dockerdeploy"
          SERVICE_DIR_URL="https://github.com/${GITHUB_REPOSITORY_OWNER}/${GITHUB_REPOSITORY_NAME}/tree/${GITHUB_BRANCH}"
          SERVICE_BUILD_LOGS_URL="https://github.com/${GITHUB_REPOSITORY_OWNER}/${GITHUB_REPOSITORY_NAME}/actions"
        fi
        SERVICE_SUMO_DASHBOARD_URL="https://service.us2.sumologic.com/ui/dashboard.html?k=lQbhHeuGZGWZWWGieu9m62KoH2g1NCrIXOckKoK7boUACqcaEQ5tkUxQ2DzT&f=&t=r&filters=Cluster*eq*${{inputs.cluster_name}}**Service*eq*${SERVICE}**TaskDefVersion*eq*%5C*"
        SERVICE_ECS_CONSOLE_URL="${ECS_CLUSTER_CONSOLE_URL}/${{inputs.cluster_version}}-${{inputs.cluster_name}}_${SERVICE}/details"
        [ -z "$deploy_type" ] && continue
        echo "[${SERVICE}](${SERVICE_DIR_URL}) | [Link](https://${{inputs.cluster_name}}.glgresearch.com/${SERVICE}${HEALTHCHECK}) | [Link](${SERVICE_BUILD_LOGS_URL}) | [Link](${SERVICE_SUMO_DASHBOARD_URL}) | [Link](${SERVICE_ECS_CONSOLE_URL})" | tee -a "$WIKI_HOME_PAGE"
      done
      pushd "$WIKI_DIR" > /dev/null
      git config --local user.email "${{inputs.git_email}}"
      git config --local user.name "${{inputs.git_username}}"
      git add -A
      git commit -m "Links update" || exit 0
      git push origin master
      pushd "$GDS_DIR" > /dev/null
      REPO_NAME=$(echo "${GITHUB_REPOSITORY}" | perl -pe 's|glg/||')
      cp $WIKI_HOME_PAGE ./clusterconfigs/$REPO_NAME
      git config --local user.email "${{inputs.git_email}}"
      git config --local user.name "${{inputs.git_username}}"
      git add -A
      git commit -m "Config update for ${REPO_NAME}" || exit 0
      git push origin main